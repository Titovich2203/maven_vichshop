package vichshop.modeles;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import vichshop.model.BonCommande;
import vichshop.model.DetailCommande;
import vichshop.model.Facture;
import vichshop.utils.Utils;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;


public final class FacturePdf {

    private static Facture facture;
    private static BonCommande commande;

    private static String FILE;

    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static Font titledFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD, BaseColor.LIGHT_GRAY);

    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLDITALIC, BaseColor.RED);
    private static Font nonValideFont = new Font(Font.FontFamily.HELVETICA, 52, Font.BOLDITALIC, BaseColor.RED);

    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
    private static Font dateBold = new Font(Font.FontFamily.HELVETICA, 12, Font.ITALIC);
    private static Font titreBold = new Font(Font.FontFamily.COURIER, 14, Font.BOLD);
    private static Font designationBold = new Font(Font.FontFamily.HELVETICA, 12, Font.UNDEFINED);



    // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    private static void addMetaData(Document document) {
        document.addTitle("Facture de payement");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Tito Vich");
        document.addCreator("Tito Vich");
    }

    private static void addTitlePage(Document document)
            throws DocumentException, IOException {


        String imageFile = "logo.png";
        Image data = Image.getInstance(imageFile);
        //data.setAbsolutePosition(100,100);
        data.setAlignment(Element.ALIGN_RIGHT);
        //document.add(data);

        Paragraph preface = new Paragraph();

        Paragraph dateParagraph = new Paragraph("Date : " + Utils.convertDateToString(commande.getDate()), dateBold);

        preface.add(dateParagraph);

        preface.add(data);

        // We add one empty line
        //addEmptyLine(preface, 1);
        // Lets write a big header
        if(facture.getTypeFacture().getLibelle().equals("SOLDE"))
        preface.add(new Paragraph("Facture de solde ", titledFont));
        else
            preface.add(new Paragraph("Facture d'accompte(30%) ", titledFont));

        addEmptyLine(preface, 2);
        // Will create: Report generated by: _name, _date

        preface.add(new Paragraph("Numero commande         : "+commande.getNumero(), smallBold));
        preface.add(new Paragraph("Denomination                  : "+commande.getClient().getNom(), smallBold));
        preface.add(new Paragraph("Email                                : "+commande.getClient().getEmail(), smallBold));
        preface.add(new Paragraph("Type client                       : "+commande.getClient().getTypeClient().getLibelle(), smallBold));
        preface.add(new Paragraph("Date de livraison voulue : "+commande.getDateLivrVoulu(), smallBold));

        addEmptyLine(preface, 3);
        createTable(preface);

        addEmptyLine(preface, 3);
        createTableFacture(preface);
        addEmptyLine(preface, 7);

        Paragraph last = new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), redFont);
        last.setAlignment(Element.ALIGN_RIGHT);
        preface.add(last);
        addEmptyLine(preface, 3);
        /*
        preface.add(new Paragraph(
                "This document describes something which is very important ",
                smallBold));

        addEmptyLine(preface, 8);

        preface.add(new Paragraph(
                "This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
                redFont));
        */

        document.add(preface);
        // Start a new page
        document.newPage();
    }

    private static void addContent(Document document) throws DocumentException {
        Anchor anchor = new Anchor("First Chapter", catFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph("Subcategory 1", subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Hello"));

        subPara = new Paragraph("Subcategory 2", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Paragraph 1"));
        subCatPart.add(new Paragraph("Paragraph 2"));
        subCatPart.add(new Paragraph("Paragraph 3"));

        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);

        // add a table
        //createTable(subCatPart);

        // now add all this to the document
        document.add(catPart);

        // Next section
        anchor = new Anchor("Second Chapter", catFont);
        anchor.setName("Second Chapter");

        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Subcategory", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("This is a very important message"));

        // now add all this to the document
        document.add(catPart);

    }

    private static void createTable(Paragraph p)
            throws BadElementException {
        PdfPTable table = new PdfPTable(4);
        table.setWidthPercentage(100);


        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("DESIGNATION", titreBold));
        c1.setHorizontalAlignment(Element.ALIGN_LEFT);
        c1.setPadding(10);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("PU", titreBold));
        c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
        c1.setPadding(10);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("QTE", titreBold));
        c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
        c1.setPadding(10);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("MONTANT", titreBold));
        c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
        c1.setPadding(10);
        table.addCell(c1);
        table.setHeaderRows(1);

        for(DetailCommande d : commande.getDetails())
        {
            PdfPCell c = new PdfPCell(new Phrase(d.getProduit().getLibelle(), designationBold));
            c.setPadding(5);
            table.addCell(c);
            c = new PdfPCell(new Phrase(d.getProduit().getPrixU()+"", dateBold));
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c.setPadding(5);
            table.addCell(c);
            c = new PdfPCell(new Phrase(d.getQte()+"", dateBold));
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c.setPadding(5);
            table.addCell(c);
            c = new PdfPCell(new Phrase((d.getProduit().getPrixU() * d.getQte())+" FCFA", dateBold));
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c.setPadding(5);
            table.addCell(c);
        }

        /*
        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("1.3");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");
        table.addCell("2.4");

         */

        p.add(table);

    }
    private static void createTableFacture(Paragraph p)
            throws BadElementException {
        PdfPTable table = new PdfPTable(4);
        table.setWidthPercentage(100);


        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("MONTANT HT", titreBold));
        c1.setHorizontalAlignment(Element.ALIGN_LEFT);
        c1.setPadding(10);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("TVA", titreBold));
        c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
        c1.setPadding(10);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("REMISE", titreBold));
        c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
        c1.setPadding(10);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("MONTANT TTC", titreBold));
        c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
        c1.setPadding(10);
        table.addCell(c1);
        table.setHeaderRows(1);

            PdfPCell c = new PdfPCell(new Phrase(facture.getMntHt()+" FCFA", designationBold));
            c.setPadding(5);
            table.addCell(c);
            c = new PdfPCell(new Phrase(facture.getMntTva()+" FCFA", dateBold));
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c.setPadding(5);
            table.addCell(c);
            c = new PdfPCell(new Phrase(facture.getRemise()+" %", dateBold));
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c.setPadding(5);
            table.addCell(c);
            c = new PdfPCell(new Phrase(facture.getMntTtc()+" FCFA", dateBold));
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c.setPadding(5);
            table.addCell(c);
        /*
        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("1.3");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");
        table.addCell("2.4");

         */

        p.add(table);

    }

    private static void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
    public static void imprimerPdf(Facture f)
    {
        setFacture(f);
        setCommande(f.getBon());
        FILE = "impression/factures/FACTURE_"+commande.getNumero()+"_"+f.getPourcentage()+".pdf";

        try {
            Document document = new Document();
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
            addTitlePage(document);
           // addContent(document);
            document.close();
            Runtime.
                    getRuntime().
                    exec("cmd /c start "+FILE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void setFacture(Facture facture) {
        FacturePdf.facture = facture;
    }

    private static void setCommande(BonCommande command) {
        commande = command;
    }
}
